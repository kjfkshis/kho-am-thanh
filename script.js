// D√ÅN 2 "CH√åA KHO√Å" C·ª¶A B·∫†N V√ÄO ƒê√ÇY
const APPWRITE_PROJECT_ID = '6904f537002b8df7dd89';
const APPWRITE_BUCKET_ID = '6904f5d60014d41970a2';

// ----- KH√îNG S·ª¨A PH·∫¶N B√äN D∆Ø·ªöI -----

// 1. K·∫øt n·ªëi v·ªõi Appwrite
const { Client, Storage, ID } = Appwrite;
const client = new Client();
client
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject(APPWRITE_PROJECT_ID);

const storage = new Storage(client);

// 2. L·∫•y c√°c ph·∫ßn t·ª≠ HTML
const uploadInput = document.getElementById('upload-input');
const chooseFileBtn = document.getElementById('choose-file-btn');
const uploadButton = document.getElementById('upload-button');
const statusText = document.getElementById('status');
const fileListDiv = document.getElementById('file-list');
const fileNameDisplay = document.getElementById('file-name-display');
const searchInput = document.getElementById('search-input');
const suggestionsBox = document.getElementById('search-suggestions'); // <-- H·ªôp g·ª£i √Ω M·ªöI

// 3. Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch file
let allAudioFiles = [];

// 4. X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "Ch·ªçn T·ªáp"
chooseFileBtn.addEventListener('click', () => {
    uploadInput.click();
});

// 5. Hi·ªÉn th·ªã t√™n file khi ƒë√£ ch·ªçn
uploadInput.addEventListener('change', () => {
    if (uploadInput.files.length > 0) {
        fileNameDisplay.textContent = uploadInput.files[0].name;
        uploadButton.disabled = false;
    } else {
        fileNameDisplay.textContent = 'Ch∆∞a ch·ªçn file n√†o';
        uploadButton.disabled = true;
    }
});

// 6. X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "T·∫£i l√™n"
uploadButton.addEventListener('click', () => {
    const file = uploadInput.files[0];
    if (!file) {
        statusText.textContent = 'L·ªói: B·∫°n ch∆∞a ch·ªçn file!';
        return;
    }

    statusText.textContent = 'ƒêang t·∫£i l√™n...';
    uploadButton.disabled = true;
    chooseFileBtn.disabled = true;

    const promise = storage.createFile(
        APPWRITE_BUCKET_ID,
        ID.unique(),
        file
    );

    promise.then(function (response) {
        statusText.textContent = 'T·∫£i l√™n th√†nh c√¥ng!';
        uploadInput.value = '';
        fileNameDisplay.textContent = 'Ch∆∞a ch·ªçn file n√†o';
        
        allAudioFiles.unshift(response); // Th√™m file m·ªõi v√†o ƒë·∫ßu danh s√°ch
        renderFiles(allAudioFiles); // V·∫Ω l·∫°i to√†n b·ªô danh s√°ch
        
        chooseFileBtn.disabled = false;
    }, function (error) {
        statusText.textContent = `L·ªói: ${error.message}`;
        uploadButton.disabled = false;
        chooseFileBtn.disabled = false;
    });
});

// 7. H√ÄM "V·∫Ω" danh s√°ch file (ƒê√É N√ÇNG C·∫§P V·ªöI ID)
function renderFiles(filesToRender) {
    fileListDiv.innerHTML = ''; 

    if (filesToRender.length === 0) {
        fileListDiv.innerHTML = '<div class="empty-state">Ch∆∞a c√≥ file n√†o.</div>';
        return;
    }

    filesToRender.forEach(file => {
        const url = `https://cloud.appwrite.io/v1/storage/buckets/${APPWRITE_BUCKET_ID}/files/${file.$id}/view?project=${APPWRITE_PROJECT_ID}`;
        
        const card = document.createElement('div');
        card.className = 'file-card';
        // === N√ÇNG C·∫§P QUAN TR·ªåNG: Th√™m ID duy nh·∫•t cho m·ªói card ===
        card.id = `file-card-${file.$id}`;
        // ======================================================

        card.innerHTML = `
            <div class="file-card-header">
                <span class="file-icon">üéµ</span>
                <span class="file-name" title="${file.name}">${file.name}</span>
            </div>
            <div class="file-card-body">
                <audio controls preload="none" src="${url}"></audio>
            </div>
            <div class="file-card-footer">
                <button class="use-btn" data-url="${url}" data-filename="${file.name}">
                    S·ª≠ d·ª•ng file n√†y
                </button>
            </div>
        `;

        fileListDiv.appendChild(card);

        // G·∫Øn s·ª± ki·ªán cho n√∫t "S·ª≠ d·ª•ng"
        const useButton = card.querySelector('.use-btn');
        useButton.addEventListener('click', (e) => {
            e.preventDefault();
            window.parent.postMessage({
                type: 'USE_AUDIO',
                url: url,
                fileName: file.name
            }, 'https://www.minimax.io'); 
        });
    });
}

// 8. H√ÄM M·ªöI: "Nh·∫£y" (Scroll) ƒë·∫øn card v√† l√†m n·ªïi b·∫≠t
function jumpToCard(fileId) {
    const targetCard = document.getElementById(`file-card-${fileId}`);
    if (targetCard) {
        // Cu·ªôn ƒë·∫øn card
        targetCard.scrollIntoView({
            behavior: 'smooth', // Cu·ªôn m∆∞·ª£t
            block: 'center'    // CƒÉn card v√†o gi·ªØa m√†n h√¨nh
        });

        // L√†m n·ªïi b·∫≠t card
        targetCard.classList.add('highlight');

        // X√≥a n·ªïi b·∫≠t sau 2 gi√¢y
        setTimeout(() => {
            targetCard.classList.remove('highlight');
        }, 2000);
    }
}

// 9. H√ÄM M·ªöI: L·∫Øng nghe s·ª± ki·ªán t√¨m ki·∫øm (ƒê√É THAY ƒê·ªîI HO√ÄN TO√ÄN)
searchInput.addEventListener('input', () => {
    const searchTerm = searchInput.value.toLowerCase();
    suggestionsBox.innerHTML = ''; // X√≥a g·ª£i √Ω c≈©

    // N·∫øu kh√¥ng g√µ g√¨, ·∫©n h·ªôp g·ª£i √Ω
    if (searchTerm.length === 0) {
        suggestionsBox.style.display = 'none';
        return;
    }

    // L·ªçc 10 g·ª£i √Ω h√†ng ƒë·∫ßu
    const filteredFiles = allAudioFiles.filter(file => 
        file.name.toLowerCase().includes(searchTerm)
    ).slice(0, 10); // Gi·ªõi h·∫°n 10 g·ª£i √Ω

    if (filteredFiles.length > 0) {
        filteredFiles.forEach(file => {
            const item = document.createElement('div');
            item.className = 'suggestion-item';
            
            // L√†m n·ªïi b·∫≠t ch·ªØ c√°i kh·ªõp
            const regex = new RegExp(`(${searchTerm})`, 'gi');
            item.innerHTML = file.name.replace(regex, '<strong>$1</strong>');
            
            // G·∫Øn s·ª± ki·ªán click ƒë·ªÉ "nh·∫£y"
            item.addEventListener('click', () => {
                jumpToCard(file.$id); // G·ªçi h√†m "nh·∫£y"
                searchInput.value = ''; // X√≥a thanh t√¨m ki·∫øm
                suggestionsBox.style.display = 'none'; // ·∫®n h·ªôp g·ª£i √Ω
            });
            
            suggestionsBox.appendChild(item);
        });
        suggestionsBox.style.display = 'block'; // Hi·ªÉn th·ªã h·ªôp g·ª£i √Ω
    } else {
        suggestionsBox.style.display = 'none'; // ·∫®n n·∫øu kh√¥ng c√≥ g·ª£i √Ω
    }
});

// 10. H√ÄM C≈®: T·∫£i danh s√°ch file t·ª´ Appwrite
function loadFiles() {
    fileListDiv.innerHTML = '<div class="loading">ƒêang t·∫£i danh s√°ch...</div>';

    const promise = storage.listFiles(APPWRITE_BUCKET_ID);

    promise.then(function (response) {
        const sortedFiles = response.files.sort((a, b) => new Date(b.$createdAt) - new Date(a.$createdAt));
        
        // L∆ØU V√ÄO BI·∫æN TO√ÄN C·ª§C
        allAudioFiles = sortedFiles;
        
        // Render ra l·∫ßn ƒë·∫ßu (v·∫Ω to√†n b·ªô)
        renderFiles(allAudioFiles);

    }, function (error) {
        fileListDiv.innerHTML = '<div class="empty-state" style="color: #f55;">L·ªói khi t·∫£i danh s√°ch file.</div>';
        console.log(error);
    });
}

// 11. T·∫£i danh s√°ch file ngay khi m·ªü trang
loadFiles();

// 12. ·∫®n h·ªôp g·ª£i √Ω khi click ra ngo√†i
document.addEventListener('click', (e) => {
    if (!searchInput.contains(e.target)) {
        suggestionsBox.style.display = 'none';
    }
});
