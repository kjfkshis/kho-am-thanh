// D√ÅN 2 "CH√åA KHO√Å" C·ª¶A B·∫†N V√ÄO ƒê√ÇY
const APPWRITE_PROJECT_ID = '6904f537002b8df7dd89';
const APPWRITE_BUCKET_ID = '6904f5d60014d41970a2';

// ----- KH√îNG S·ª¨A PH·∫¶N B√äN D∆Ø·ªöI -----

// 1. K·∫øt n·ªëi v·ªõi Appwrite
const { Client, Storage, ID } = Appwrite;
const client = new Client();
client
    .setEndpoint('https://cloud.appwrite.io/v1') // M√°y ch·ªß Appwrite
    .setProject(APPWRITE_PROJECT_ID);          // M√£ d·ª± √°n c·ªßa b·∫°n

const storage = new Storage(client);

// 2. L·∫•y c√°c ph·∫ßn t·ª≠ HTML (ƒê√£ th√™m c√°c n√∫t m·ªõi)
const uploadInput = document.getElementById('upload-input');
const chooseFileBtn = document.getElementById('choose-file-btn');
const uploadButton = document.getElementById('upload-button');
const statusText = document.getElementById('status');
const fileListDiv = document.getElementById('file-list');
const fileNameDisplay = document.getElementById('file-name-display');

// 3. X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "Ch·ªçn T·ªáp" M·ªöI
chooseFileBtn.addEventListener('click', () => {
    uploadInput.click(); // K√≠ch ho·∫°t input file ·∫©n
});

// 4. Hi·ªÉn th·ªã t√™n file khi ƒë√£ ch·ªçn v√† b·∫≠t n√∫t "T·∫£i l√™n"
uploadInput.addEventListener('change', () => {
    if (uploadInput.files.length > 0) {
        fileNameDisplay.textContent = uploadInput.files[0].name;
        uploadButton.disabled = false; // B·∫≠t n√∫t t·∫£i l√™n
    } else {
        fileNameDisplay.textContent = 'Ch∆∞a ch·ªçn file n√†o';
        uploadButton.disabled = true; // T·∫Øt n√∫t t·∫£i l√™n
    }
});

// 5. X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "T·∫£i l√™n"
uploadButton.addEventListener('click', () => {
    const file = uploadInput.files[0];
    if (!file) {
        statusText.textContent = 'L·ªói: B·∫°n ch∆∞a ch·ªçn file!';
        return;
    }

    statusText.textContent = 'ƒêang t·∫£i l√™n...';
    uploadButton.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t khi ƒëang t·∫£i
    chooseFileBtn.disabled = true;

    // T·∫£i file l√™n Appwrite Storage
    const promise = storage.createFile(
        APPWRITE_BUCKET_ID, // M√£ nh√† kho
        ID.unique(),        // T·∫°o m·ªôt ID ng·∫´u nhi√™n cho file
        file                // File ƒë·ªÉ t·∫£i l√™n
    );

    promise.then(function (response) {
        statusText.textContent = 'T·∫£i l√™n th√†nh c√¥ng!';
        uploadInput.value = ''; // X√≥a file ƒë√£ ch·ªçn
        fileNameDisplay.textContent = 'Ch∆∞a ch·ªçn file n√†o';
        loadFiles(); // T·∫£i l·∫°i danh s√°ch file
        chooseFileBtn.disabled = false; // B·∫≠t l·∫°i n√∫t
        // N√∫t "T·∫£i l√™n" v·∫´n disabled cho ƒë·∫øn khi ch·ªçn file m·ªõi
    }, function (error) {
        statusText.textContent = `L·ªói: ${error.message}`;
        uploadButton.disabled = false; // B·∫≠t l·∫°i n√∫t
        chooseFileBtn.disabled = false;
    });
});

// 6. H√†m t·∫£i v√† hi·ªÉn th·ªã danh s√°ch file (ƒê√É VI·∫æT L·∫†I CHO GIAO DI·ªÜN CARD)
function loadFiles() {
    fileListDiv.innerHTML = '<div class="loading">ƒêang t·∫£i danh s√°ch...</div>';

    const promise = storage.listFiles(APPWRITE_BUCKET_ID); // L·∫•y danh s√°ch file

    promise.then(function (response) {
        fileListDiv.innerHTML = ''; // X√≥a n·ªôi dung c≈©
        if (response.files.length === 0) {
            fileListDiv.innerHTML = '<div class="empty-state">Ch∆∞a c√≥ file n√†o.</div>';
            return;
        }

        // S·∫Øp x·∫øp file theo ng√†y t·∫°o, m·ªõi nh·∫•t l√™n ƒë·∫ßu
        const sortedFiles = response.files.sort((a, b) => new Date(b.$createdAt) - new Date(a.$createdAt));

        sortedFiles.forEach(file => {
            // L·∫•y URL c√¥ng khai ƒë·ªÉ nghe/t·∫£i
            const url = `https://cloud.appwrite.io/v1/storage/buckets/${APPWRITE_BUCKET_ID}/files/${file.$id}/view?project=${APPWRITE_PROJECT_ID}`;

            // T·∫°o th·∫ª .file-card
            const card = document.createElement('div');
            card.className = 'file-card';

            // T·∫°o n·ªôi dung HTML cho card
            card.innerHTML = `
                <div class="file-card-header">
                    <span class="file-icon">üéµ</span>
                    <span class="file-name" title="${file.name}">${file.name}</span>
                </div>
                <div class="file-card-body">
                    <audio controls preload="none" src="${url}"></audio>
                </div>
                <div class="file-card-footer">
                    <button class="use-btn" data-url="${url}" data-filename="${file.name}">
                        S·ª≠ d·ª•ng file n√†y
                    </button>
                </div>
            `;

            // G·∫Øn card v√†o l∆∞·ªõi
            fileListDiv.appendChild(card);

            // QUAN TR·ªåNG: Th√™m listener cho n√∫t "S·ª≠ d·ª•ng" sau khi ƒë√£ t·∫°o card
            const useButton = card.querySelector('.use-btn');
            useButton.addEventListener('click', (e) => {
                e.preventDefault();
                
                // G·ª≠i tin nh·∫Øn cho c·ª≠a s·ªï cha (tool)
                window.parent.postMessage({
                    type: 'USE_AUDIO',        // T√≠n hi·ªáu nh·∫≠n bi·∫øt
                    url: url,                 // ƒê∆∞·ªùng link file
                    fileName: file.name       // T√™n file
                }, 'https://www.minimax.io'); 
            });
        });

    }, function (error) {
        fileListDiv.innerHTML = '<div class="empty-state" style="color: #f55;">L·ªói khi t·∫£i danh s√°ch file.</div>';
        console.log(error);
    });
}

// 7. T·∫£i danh s√°ch file ngay khi m·ªü trang
loadFiles();
