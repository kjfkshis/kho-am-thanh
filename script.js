// D√ÅN 2 "CH√åA KHO√Å" C·ª¶A B·∫†N V√ÄO ƒê√ÇY
const APPWRITE_PROJECT_ID = '6904f537002b8df7dd89';
const APPWRITE_BUCKET_ID = '6904f5d60014d41970a2';
const DELETE_PASSWORD = '221504'; // M·∫≠t kh·∫©u x√≥a file

// ----- KH√îNG S·ª¨A PH·∫¶N B√äN D∆Ø·ªöI -----

// 1. K·∫øt n·ªëi v·ªõi Appwrite
const { Client, Storage, ID } = Appwrite;
const client = new Client();
client
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject(APPWRITE_PROJECT_ID);
const storage = new Storage(client);

// 2. L·∫•y c√°c ph·∫ßn t·ª≠ HTML (ƒê√£ th√™m b·ªô l·ªçc)
const uploadInput = document.getElementById('upload-input');
const chooseFileBtn = document.getElementById('choose-file-btn');
const uploadButton = document.getElementById('upload-button');
const statusText = document.getElementById('status');
const fileListDiv = document.getElementById('file-list');
const fileNameDisplay = document.getElementById('file-name-display');

// B·ªô l·ªçc M·ªöI
const searchInput = document.getElementById('search-input');
const genderFilter = document.getElementById('filter-gender');
const countryFilter = document.getElementById('filter-country');
const sortFilter = document.getElementById('filter-sort');

// 3. Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch file
let allAudioFiles = [];

// 4. X·ª≠ l√Ω T·∫£i l√™n (Gi·ªØ nguy√™n)
chooseFileBtn.addEventListener('click', () => uploadInput.click());

uploadInput.addEventListener('change', () => {
    if (uploadInput.files.length > 0) {
        fileNameDisplay.textContent = uploadInput.files[0].name;
        uploadButton.disabled = false;
    } else {
        fileNameDisplay.textContent = 'Ch∆∞a ch·ªçn file n√†o';
        uploadButton.disabled = true;
    }
});

uploadButton.addEventListener('click', () => {
    const file = uploadInput.files[0];
    if (!file) { statusText.textContent = 'L·ªói: B·∫°n ch∆∞a ch·ªçn file!'; return; }

    statusText.textContent = 'ƒêang t·∫£i l√™n...';
    uploadButton.disabled = true;
    chooseFileBtn.disabled = true;

    storage.createFile(APPWRITE_BUCKET_ID, ID.unique(), file).then(function (response) {
        statusText.textContent = 'T·∫£i l√™n th√†nh c√¥ng!';
        uploadInput.value = '';
        fileNameDisplay.textContent = 'Ch∆∞a ch·ªçn file n√†o';
        
        allAudioFiles.unshift(response); // Th√™m file m·ªõi v√†o ƒë·∫ßu
        applyFiltersAndRender(); // Render l·∫°i danh s√°ch
        
        chooseFileBtn.disabled = false;
    }, function (error) {
        statusText.textContent = `L·ªói: ${error.message}`;
        uploadButton.disabled = false;
        chooseFileBtn.disabled = false;
    });
});

// 5. H√ÄM M·ªöI: L·ªçc v√† S·∫Øp x·∫øp (B·ªô n√£o ch√≠nh)
function applyFiltersAndRender() {
    // L·∫•y gi√° tr·ªã t·ª´ c√°c b·ªô l·ªçc
    const searchTerm = searchInput.value.toLowerCase();
    const gender = genderFilter.value;
    const country = countryFilter.value;
    const sort = sortFilter.value;

    // B·∫Øt ƒë·∫ßu l·ªçc
    let filteredList = [...allAudioFiles];

    // L·ªçc theo T√¨m ki·∫øm
    if (searchTerm) {
        filteredList = filteredList.filter(file => 
            file.name.toLowerCase().includes(searchTerm)
        );
    }

    // L·ªçc theo Gi·ªõi t√≠nh (d·ª±a tr√™n tag [Nam] [N·ªØ])
    if (gender !== 'all') {
        const tag = `[${gender}]`;
        filteredList = filteredList.filter(file => 
            file.name.toLowerCase().includes(tag.toLowerCase())
        );
    }

    // L·ªçc theo Qu·ªëc gia (d·ª±a tr√™n tag [VN] [US]...)
    if (country !== 'all') {
        const tag = `[${country}]`;
        filteredList = filteredList.filter(file => 
            file.name.toLowerCase().includes(tag.toLowerCase())
        );
    }

    // S·∫Øp x·∫øp
    if (sort === 'name-asc') {
        filteredList.sort((a, b) => a.name.localeCompare(b.name));
    } else if (sort === 'name-desc') {
        filteredList.sort((a, b) => b.name.localeCompare(a.name));
    } else {
        // M·∫∑c ƒë·ªãnh l√† 'newest' (ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp khi t·∫£i)
        // N·∫øu d√πng sort kh√°c, ta c·∫ßn sort l·∫°i theo $createdAt
        filteredList.sort((a, b) => new Date(b.$createdAt) - new Date(a.$createdAt));
    }

    // "V·∫Ω" k·∫øt qu·∫£ ra giao di·ªán
    renderCards(filteredList);
}

// 6. H√ÄM "V·∫º" GIAO DI·ªÜN (ƒê√£ th√™m N√∫t X√≥a)
function renderCards(filesToRender) {
    fileListDiv.innerHTML = ''; // X√≥a n·ªôi dung c≈©

    if (filesToRender.length === 0) {
        if (searchInput.value || genderFilter.value !== 'all' || countryFilter.value !== 'all') {
            fileListDiv.innerHTML = '<div class="empty-state">Kh√¥ng t√¨m th·∫•y file n√†o kh·ªõp v·ªõi b·ªô l·ªçc.</div>';
        } else {
            fileListDiv.innerHTML = '<div class="empty-state">Ch∆∞a c√≥ file n√†o.</div>';
        }
        return;
    }

    filesToRender.forEach(file => {
        const url = `https://cloud.appwrite.io/v1/storage/buckets/${APPWRITE_BUCKET_ID}/files/${file.$id}/view?project=${APPWRITE_PROJECT_ID}`;
        
        const card = document.createElement('div');
        card.className = 'file-card';
        card.id = `file-card-${file.$id}`; // Th√™m ID ƒë·ªÉ x√≥a kh·ªèi UI

        card.innerHTML = `
            <div class="file-card-header">
                <span class="file-icon">üéµ</span>
                <span class="file-name" title="${file.name}">${file.name}</span>
            </div>
            <div class="file-card-body">
                <audio controls preload="none" src="${url}"></audio>
            </div>
            <div class="file-card-footer">
                <button class="use-btn" data-url="${url}" data-filename="${file.name}">
                    S·ª≠ d·ª•ng
                </button>
                <button class="delete-btn" data-file-id="${file.$id}" data-file-name="${file.name}">
                    üóëÔ∏è X√≥a
                </button>
            </div>
        `;
        fileListDiv.appendChild(card);
    });
}

// 7. L·∫ÆNG NGHE S·ª∞ KI·ªÜN CHO C√ÅC B·ªò L·ªåC
searchInput.addEventListener('input', applyFiltersAndRender);
genderFilter.addEventListener('change', applyFiltersAndRender);
countryFilter.addEventListener('change', applyFiltersAndRender);
sortFilter.addEventListener('change', applyFiltersAndRender);

// 8. L·∫ÆNG NGHE S·ª∞ KI·ªÜN CHO N√öT "S·ª¨ D·ª§NG" V√Ä "X√ìA" (Event Delegation)
fileListDiv.addEventListener('click', function(e) {
    
    // --- X·ª≠ l√Ω N√∫t "S·ª≠ d·ª•ng" ---
    if (e.target && e.target.classList.contains('use-btn')) {
        const button = e.target;
        window.parent.postMessage({
            type: 'USE_AUDIO',
            url: button.dataset.url,
            fileName: button.dataset.filename
        }, 'https://www.minimax.io');
    }

    // --- X·ª≠ l√Ω N√∫t "X√≥a" ---
    if (e.target && e.target.classList.contains('delete-btn')) {
        const button = e.target;
        const fileId = button.dataset.fileId;
        const fileName = button.dataset.fileName;

        // 1. H·ªèi m·∫≠t kh·∫©u
        const password = prompt(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a file "${fileName}"?\n\nN·∫øu ch·∫Øc, h√£y nh·∫≠p m·∫≠t kh·∫©u:`);
        
        if (password === null) {
            return; // Ng∆∞·ªùi d√πng nh·∫•n H·ªßy
        }

        if (password === DELETE_PASSWORD) {
            // 2. M·∫≠t kh·∫©u ƒë√∫ng -> X√≥a file
            statusText.textContent = `ƒêang x√≥a file ${fileName}...`;
            button.textContent = '...';
            button.disabled = true;

            storage.deleteFile(APPWRITE_BUCKET_ID, fileId).then(function (response) {
                statusText.textContent = `ƒê√£ x√≥a file "${fileName}" th√†nh c√¥ng!`;
                
                // X√≥a kh·ªèi m·∫£ng data ch√≠nh
                allAudioFiles = allAudioFiles.filter(file => file.$id !== fileId);
                // Render l·∫°i danh s√°ch
                applyFiltersAndRender();
                
            }, function (error) {
                statusText.textContent = `L·ªói khi x√≥a file: ${error.message}`;
                button.textContent = 'üóëÔ∏è X√≥a';
                button.disabled = false;
            });

        } else {
            // 3. M·∫≠t kh·∫©u sai
            alert('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. X√≥a file th·∫•t b·∫°i.');
        }
    }
});


// 9. H√ÄM T·∫¢I FILE BAN ƒê·∫¶U
function loadFiles() {
    fileListDiv.innerHTML = '<div class="loading">ƒêang t·∫£i danh s√°ch...</div>';

    storage.listFiles(APPWRITE_BUCKET_ID).then(function (response) {
        // S·∫Øp x·∫øp m·∫∑c ƒë·ªãnh: M·ªõi nh·∫•t l√™n ƒë·∫ßu
        allAudioFiles = response.files.sort((a, b) => new Date(b.$createdAt) - new Date(a.$createdAt));
        // Render ra l·∫ßn ƒë·∫ßu
        applyFiltersAndRender();

    }, function (error) {
        fileListDiv.innerHTML = '<div class="empty-state" style="color: #f55;">L·ªói khi t·∫£i danh s√°ch file.</div>';
        console.log(error);
    });
}

// 10. T·∫£i danh s√°ch file ngay khi m·ªü trang
loadFiles();
